
import pandas as pd
from price import price
from vkbottle.bot import Bot, Message
from vkbottle import Keyboard, KeyboardButtonColor, Text, template_gen, TemplateElement
from config import token
import asyncio
bot = Bot(token="c8609dc97fbce1d1543d76c138d715942d305af4d873d451650af8ab460a1a961427330e12adf65a212bf")


class User:
    total_price = 0
    def __init__(self, id, total_price, name, surname):
        self.korzina = {}
        self.id = id
        self.total_price = total_price
        self.name = name
        self.surname = surname

    def add_bag(self, tovar, quantity):
        if tovar in self.korzina.keys():
            self.korzina[tovar] += 1
        else:
            self.korzina[tovar] = quantity

keyboard_vk = Keyboard(one_time=True)
keyboard_vk.add(Text("–ú–∞–≥–∞–∑–∏–Ω"), color=KeyboardButtonColor.POSITIVE)
keyboard_vk = keyboard_vk.get_json()

manager_button = Keyboard(one_time=False).add(Text("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"), color=KeyboardButtonColor.PRIMARY).get_json()

oplata_button = Keyboard(one_time=False).add(Text("–û–ø–ª–∞—Ç–∏—Ç—å"), color=KeyboardButtonColor.SECONDARY).get_json()

korzina_button = Keyboard(one_time=True).add(Text("–ö–æ—Ä–∑–∏–Ω–∞"), color=KeyboardButtonColor.PRIMARY).get_json()

users = []





@bot.on.private_message(text="start")
async def handler(message: Message):


    user_info = await bot.api.users.get(message.from_id)
    users.append(User(user_info[0].id, 0, user_info[0].first_name, user_info[0].last_name))

    
    await message.answer("–ü—Ä–∏–≤–µ—Ç, {}üëãüèª. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É, –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ\n–ù–∞–ø–∏—à–∏ –ú–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã.\n–ö–æ—Ä–∑–∏–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø–æ–∫—É–ø–∫–∏üòâ".format(user_info[0].first_name), keyboard=keyboard_vk)
    for user in users:
        if user.id == user_info[0].id:
            df = pd.DataFrame({"Name": [user.name],
                                            "Surname": [user.surname],
                                            "Link":["https://vk.com/id{}".format(user.id)],
                                            "Korzina": [0],
                                            "Quantity":[0]
                                        })

            df.to_excel('./vk_bot.xlsx')
@bot.on.private_message(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä.")
async def printer(message: Message):

    user_info = await bot.api.users.get(message.from_id)
    user_info_id = user_info[0].id
    await message.answer("–ü—Ä–∏–≤–µ—Ç, {}üëãüèª. –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É? –¢–æ–≥–¥–∞ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞".format(user_info[0].first_name))
    if users == []:
        users.append(User(user_info_id, 0, user_info[0].first_name, user_info[0].last_name))
    else:
        for user in users:
            if user_info_id != user.id:
                users.append(User(user_info_id, 0, user_info[0].first_name, user_info[0].last_name))


@bot.on.private_message(text="–ú–∞–≥–∞–∑–∏–Ω")
async def shop(message: Message):
    user_id = await bot.api.users.get(message.from_id)
    user_id = user_id[0].id
    for user in users:
        if user.id == user_id:
            carousel = template_gen(
            TemplateElement(
            "–†–µ—Ñ–µ—Ä–∞—Ç",
            "–ü—Ä–æ—Å—Ç–æ–π –†–µ—Ñ–µ—Ä–∞—Ç –Ω–∞ 150 —Å—Ç—Ä. \n–¶–µ–Ω–∞ : 1500 —Ä.",
            buttons = Keyboard().add(Text("–ö—É–ø–∏—Ç—å –†–µ—Ñ–µ—Ä–∞—Ç"), color=KeyboardButtonColor.POSITIVE).get_json()
            ),
            TemplateElement(
                "–î–∏–ø–ª–æ–º–Ω–∞—è",
                "–ü—Ä–æ—Å—Ç–∞—è –î–∏–ø–ª–æ–º–Ω–∞—è –Ω–∞ 8 —Å—Ç—Ä. \n–¶–µ–Ω–∞ : 2000 —Ä.",
                buttons = Keyboard().add(Text("–ö—É–ø–∏—Ç—å –î–∏–ø–ª–æ–º–Ω—É—é"), color=KeyboardButtonColor.POSITIVE).get_json()
            ),
            TemplateElement(
                "–î–æ–º. –∑–∞–¥–∞–Ω–∏–µ",
                "–î–æ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ 15 —Å—Ç—Ä. \n–¶–µ–Ω–∞ : 500 —Ä.",
                buttons = Keyboard().add(Text("–ö—É–ø–∏—Ç—å –î–æ–º. –∑–∞–¥–∞–Ω–∏–µ"), color=KeyboardButtonColor.POSITIVE).get_json()
            )
            )   
            await message.answer("–ú–∞–≥–∞–∑–∏–Ω: ",template=carousel)

@bot.on.private_message(text="–†–µ—Ñ–µ—Ä–∞—Ç")
async def add(message: Message):
    user_id = await bot.api.users.get(message.from_id)
    user_id = user_id[0].id
    for user in users:
            if user.id == user_id:
                await message.answer("–î–æ–±–∞–≤–ª—è—é –†–µ—Ñ–µ—Ä–∞—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É. –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—ë, –Ω–∞–ø–∏—à–∏—Ç–µ - –ö–æ—Ä–∑–∏–Ω–∞ –∏–ª–∏ —Ç—ã–∫–Ω–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ", keyboard=korzina_button)
                user.total_price += price.get(message.text)
                user.add_bag(message.text, 1)


@bot.on.chat_message(text="–ó–∞–∫–∞–∑—ã")
async def add(message: Message):
    await message.answer()



@bot.on.private_message(text="–ö—É–ø–∏—Ç—å –†–µ—Ñ–µ—Ä–∞—Ç")
async def id(message_vk: Message):
    user_id = await bot.api.users.get(message_vk.from_id)
    user_id = user_id[0].id
    if users == []:
        await message_vk.answer("–û—Ç–∫—É–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å —á—Ç–æ –ø–∏—Å–∞—Ç—å?:)")
    else:
        for user in users:
            if user.id == user_id:
                user.total_price += price.get(message_vk.text[7:])
                user.add_bag(message_vk.text[7:], 1)
        
@bot.on.private_message(text="–ö—É–ø–∏—Ç—å –î–∏–ø–ª–æ–º–Ω—É—é")
async def id(message_vk: Message):
    user_id = await bot.api.users.get(message_vk.from_id)
    user_id = user_id[0].id
    if users == []:
        await message_vk.answer("–û—Ç–∫—É–¥–∞ —Ç—ã –∑–Ω–∞–µ—à—å —á—Ç–æ –ø–∏—Å–∞—Ç—å?:)")
    else:
        for user in users:
            if user.id == user_id:
                user.total_price += price.get(message_vk.text[7:])
                tovar_name = message_vk.text[7:]
                user.add_bag(tovar_name[:len(tovar_name)-3], 1)

                





@bot.on.private_message(text="–ö–æ—Ä–∑–∏–Ω–∞")
async def balance(message_vk: Message):
    user_id = await bot.api.users.get(message_vk.from_id)
    user_id = user_id[0].id
    await message_vk.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ : ")
    for user in users:
        if user.id == user_id:
            
            for items in user.korzina:
                await message_vk.answer("{0} - {1} —à—Ç.".format(items, user.korzina[items]))

            await message_vk.answer("–ò—Ç–æ–≥–æ : {} —Ä.".format(user.total_price))





@bot.on.private_message()
async def answer(message:Message):
    await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏. –ù–∞–ø–∏—à–∏—Ç–µ start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.\n–ú–∞–≥–∞–∑–∏–Ω, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã.\n–ö–æ—Ä–∑–∏–Ω–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.")


bot.run_forever()